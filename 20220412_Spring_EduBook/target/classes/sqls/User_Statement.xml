<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.mapper.UserDaoImpl">

  <!-- resultMap
    1) JOIN하여 값을 생성(1:n, 1:1 ...)
    2) Column 과 매핑되는 setter이름이 다른 경우
    3) 쿼리의 결과를 객체에 담을 제한하기 위하서
   -->

  <resultMap type="UserVo" id="UserMap">
    <result column="ID" property="id"/>
    <result column="NAME" property="name"/>
    <result column="EMAIL" property="email"/>
    <result column="AUTH" property="auth"/>
  </resultMap>
  
  <!-- 
    selectList(), selectOne()은 MyBatis는 반드시 객체를 반환하게 되어 있음
    쿼리의 결과가 없는 경우(공집합) 
    -selectList()는 반드시 List를 반환 => size()를 통해 판단
    -selectOne()은 공집합인 경우 객체를 생성하지 않음 => null을 판단
    
    MVC 구조에서 값을 전달하는 방법
    V(name을 통해서 전달) -> Primitive, DTO/VO, Map -> 값을 받음, setter 호출, {"name","value"}
    작업의 로직을 편하게 하기 위해서 View와 DTO..과 mapper의 전달 방식과 Binding 이름을 맞춰주면 편하다.
    
    MyBatis의 parameter는 작성을 하지 않아도 동작됨
   -->

    <select id="login" resultMap="UserMap">
      SELECT ID, NAME, EMAIL, AUTH
      FROM USERINFO
      WHERE ID=#{id} AND PASSWORD=#{password}
    </select>
    
<!--     <select id="resultValue" resultType="java.lang.Integer"> -->
    <select id="resultValue" resultType="int">
      SELECT COUNT(*)
      FROM USERINFO
    </select>
    
</mapper>
